// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 10 Sep 2019 17:18:43 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package memkind

/*
#cgo LDFLAGS: -lmemkind
#include "memkind.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// MemkindConfigNew function as declared in https://google.com/search?q=memkind.h+memkind_config_new
func MemkindConfigNew() *MemkindConfig {
	__ret := C.memkind_config_new()
	__v := *(**MemkindConfig)(unsafe.Pointer(&__ret))
	return __v
}

// MemkindConfigDelete function as declared in https://google.com/search?q=memkind.h+memkind_config_delete
func MemkindConfigDelete(Cfg []MemkindConfig) {
	cCfg, _ := (*C.struct_memkind_config)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Cfg)).Data)), cgoAllocsUnknown
	C.memkind_config_delete(cCfg)
}

// MemkindConfigSetPath function as declared in https://google.com/search?q=memkind.h+memkind_config_set_path
func MemkindConfigSetPath(Cfg []MemkindConfig, PmemDir string) {
	cCfg, _ := (*C.struct_memkind_config)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Cfg)).Data)), cgoAllocsUnknown
	PmemDir = safeString(PmemDir)
	cPmemDir, _ := unpackPCharString(PmemDir)
	C.memkind_config_set_path(cCfg, cPmemDir)
	runtime.KeepAlive(PmemDir)
}

// MemkindConfigSetSize function as declared in https://google.com/search?q=memkind.h+memkind_config_set_size
func MemkindConfigSetSize(Cfg []MemkindConfig, PmemSize uint) {
	cCfg, _ := (*C.struct_memkind_config)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Cfg)).Data)), cgoAllocsUnknown
	cPmemSize, _ := (C.size_t)(PmemSize), cgoAllocsUnknown
	C.memkind_config_set_size(cCfg, cPmemSize)
}

// MemkindConfigSetMemoryUsagePolicy function as declared in https://google.com/search?q=memkind.h+memkind_config_set_memory_usage_policy
func MemkindConfigSetMemoryUsagePolicy(Cfg []MemkindConfig, Policy MemkindMemUsagePolicy) {
	cCfg, _ := (*C.struct_memkind_config)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Cfg)).Data)), cgoAllocsUnknown
	cPolicy, _ := (C.memkind_mem_usage_policy)(Policy), cgoAllocsUnknown
	C.memkind_config_set_memory_usage_policy(cCfg, cPolicy)
}

// MemkindCreateKind function as declared in https://google.com/search?q=memkind.h+memkind_create_kind
func MemkindCreateKind(MemtypeFlags MemkindMemtypeT, Policy MemkindPolicyT, Flags MemkindBitsT, Kind []MemkindT) int32 {
	cMemtypeFlags, _ := (C.memkind_memtype_t)(MemtypeFlags), cgoAllocsUnknown
	cPolicy, _ := (C.memkind_policy_t)(Policy), cgoAllocsUnknown
	cFlags, _ := (C.memkind_bits_t)(Flags), cgoAllocsUnknown
	cKind, _ := (*C.memkind_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Kind)).Data)), cgoAllocsUnknown
	__ret := C.memkind_create_kind(cMemtypeFlags, cPolicy, cFlags, cKind)
	__v := (int32)(__ret)
	return __v
}

// MemkindDestroyKind function as declared in https://google.com/search?q=memkind.h+memkind_destroy_kind
func MemkindDestroyKind(Kind MemkindT) int32 {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	__ret := C.memkind_destroy_kind(cKind)
	__v := (int32)(__ret)
	return __v
}

// MemkindDetectKind function as declared in https://google.com/search?q=memkind.h+memkind_detect_kind
func MemkindDetectKind(Ptr unsafe.Pointer) MemkindT {
	cPtr, _ := Ptr, cgoAllocsUnknown
	__ret := C.memkind_detect_kind(cPtr)
	__v := *(*MemkindT)(unsafe.Pointer(&__ret))
	return __v
}

// MemkindGetVersion function as declared in https://google.com/search?q=memkind.h+memkind_get_version
func MemkindGetVersion() int32 {
	__ret := C.memkind_get_version()
	__v := (int32)(__ret)
	return __v
}

// MemkindErrorMessage function as declared in https://google.com/search?q=memkind.h+memkind_error_message
func MemkindErrorMessage(Err int32, Msg []byte, Size uint) {
	cErr, _ := (C.int)(Err), cgoAllocsUnknown
	cMsg, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Msg)).Data)), cgoAllocsUnknown
	cSize, _ := (C.size_t)(Size), cgoAllocsUnknown
	C.memkind_error_message(cErr, cMsg, cSize)
}

// MemkindCreatePmem function as declared in https://google.com/search?q=memkind.h+memkind_create_pmem
func MemkindCreatePmem(Dir string, MaxSize uint, Kind *MemkindT) int32 {
	Dir = safeString(Dir)
	cDir, _ := unpackPCharString(Dir)
	cMaxSize, _ := (C.size_t)(MaxSize), cgoAllocsUnknown
	cKind, _ := (*C.memkind_t)(unsafe.Pointer(Kind)), cgoAllocsUnknown
	__ret := C.memkind_create_pmem(cDir, cMaxSize, cKind)
	runtime.KeepAlive(Dir)
	__v := (int32)(__ret)
	return __v
}

// MemkindCreatePmemWithConfig function as declared in https://google.com/search?q=memkind.h+memkind_create_pmem_with_config
func MemkindCreatePmemWithConfig(Cfg *MemkindConfig, Kind []MemkindT) int32 {
	cCfg, _ := (*C.struct_memkind_config)(unsafe.Pointer(Cfg)), cgoAllocsUnknown
	cKind, _ := (*C.memkind_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Kind)).Data)), cgoAllocsUnknown
	__ret := C.memkind_create_pmem_with_config(cCfg, cKind)
	__v := (int32)(__ret)
	return __v
}

// MemkindCheckAvailable function as declared in https://google.com/search?q=memkind.h+memkind_check_available
func MemkindCheckAvailable(Kind MemkindT) int32 {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	__ret := C.memkind_check_available(cKind)
	__v := (int32)(__ret)
	return __v
}

// MemkindMalloc function as declared in https://google.com/search?q=memkind.h+memkind_malloc
func MemkindMalloc(Kind MemkindT, Size uint) unsafe.Pointer {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	cSize, _ := (C.size_t)(Size), cgoAllocsUnknown
	__ret := C.memkind_malloc(cKind, cSize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// MemkindMallocUsableSize function as declared in https://google.com/search?q=memkind.h+memkind_malloc_usable_size
func MemkindMallocUsableSize(Kind MemkindT, Ptr unsafe.Pointer) uint {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	cPtr, _ := Ptr, cgoAllocsUnknown
	__ret := C.memkind_malloc_usable_size(cKind, cPtr)
	__v := (uint)(__ret)
	return __v
}

// MemkindCalloc function as declared in https://google.com/search?q=memkind.h+memkind_calloc
func MemkindCalloc(Kind MemkindT, Num uint, Size uint) unsafe.Pointer {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	cNum, _ := (C.size_t)(Num), cgoAllocsUnknown
	cSize, _ := (C.size_t)(Size), cgoAllocsUnknown
	__ret := C.memkind_calloc(cKind, cNum, cSize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// MemkindPosixMemalign function as declared in https://google.com/search?q=memkind.h+memkind_posix_memalign
func MemkindPosixMemalign(Kind MemkindT, Memptr *unsafe.Pointer, Alignment uint, Size uint) int32 {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	cMemptr, _ := Memptr, cgoAllocsUnknown
	cAlignment, _ := (C.size_t)(Alignment), cgoAllocsUnknown
	cSize, _ := (C.size_t)(Size), cgoAllocsUnknown
	__ret := C.memkind_posix_memalign(cKind, cMemptr, cAlignment, cSize)
	__v := (int32)(__ret)
	return __v
}

// MemkindRealloc function as declared in https://google.com/search?q=memkind.h+memkind_realloc
func MemkindRealloc(Kind MemkindT, Ptr unsafe.Pointer, Size uint) unsafe.Pointer {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	cPtr, _ := Ptr, cgoAllocsUnknown
	cSize, _ := (C.size_t)(Size), cgoAllocsUnknown
	__ret := C.memkind_realloc(cKind, cPtr, cSize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// MemkindFree function as declared in https://google.com/search?q=memkind.h+memkind_free
func MemkindFree(Kind MemkindT, Ptr unsafe.Pointer) {
	cKind, _ := *(*C.memkind_t)(unsafe.Pointer(&Kind)), cgoAllocsUnknown
	cPtr, _ := Ptr, cgoAllocsUnknown
	C.memkind_free(cKind, cPtr)
}
